{"version":3,"sources":["Components/Stade.js","Components/Home.js","Components/Joueur.js","Components/Ajout.js","App.js","serviceWorker.js","index.js"],"names":["Stade","props","render","stade","state","tournoi","map","data","i","key","nom_stade","adresse_stade","cp_stade","cellSpacing","cellPadding","fetch","then","response","json","setState","Component","Home","Joueur","deleteJoueur","method","headers","Accept","console","log","success","window","confirm","LesJoueurs","players","nom_joueur","prenom_joueur","type","onClick","history","push","id_joueur","joueur","Ajout","handleChange","e","target","name","value","submit","options","body","JSON","stringify","firstname","numero","numeroJoueur","date_naissance_joueur","date","id_poste","posteJoueur","id_equipe","equipeJoueur","alert","postes","equipes","this","id","onSubmit","htmlFor","onChange","min","max","poste","nom_poste","equipe","nom_equipe","App","className","to","exact","path","component","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kRAEqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,OAAS,WACP,IAAIC,EAAQ,EAAKC,MAAMC,QAAQC,KAAI,SAACC,EAAMC,GACxC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAKG,WACV,4BAAKH,EAAKI,eACV,4BAAKJ,EAAKK,cAIhB,OACE,2BAAOC,YAAY,IAAIC,YAAY,KACjC,+BACE,4BACE,4CACA,gDACA,6CAGJ,+BAAQX,KApCZ,EAAKC,MAAQ,CACXC,QAAS,IAJM,E,gEAQE,IAAD,OAGlBU,MAFU,0BAGPC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACT,GACL,EAAKY,SAAS,CAAEd,QAASE,W,GAjBEa,aCAdC,E,uKAEb,OACI,kC,GAHsBD,aCAbE,E,kDACnB,WAAYrB,GAAQ,IAAD,8BACjB,cAAMA,IAQRsB,aAAe,WAWbR,MAAM,wBATU,CACdS,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAMTV,MAAK,SAACC,GAEL,OADAU,QAAQC,IAAIX,GACLA,EAASC,UAEjBF,MAAK,SAACT,GACDA,EAAKsB,SACPC,OAAOC,QAAQ,4CA3BJ,EA8CnB7B,OAAS,WAEP,IAAI8B,EAAa,EAAK5B,MAAM6B,QAAQ3B,KAAI,SAACC,EAAMC,GAC7C,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAK2B,YACV,4BAAK3B,EAAK4B,eACV,4BAEE,4BACEC,KAAK,SACLC,QAAS,kBACP,EAAKpC,MAAMqC,QAAQC,KAAnB,iBAAkChC,EAAKiC,cAH3C,aAUF,4BAIE,4BACEJ,KAAK,SACLC,QAAS,kBAAM,EAAKd,aACdhB,EAAKiC,UACLjC,EAAK4B,cACL5B,EAAK2B,cALb,kBAgBR,OACE,2BAAOrB,YAAY,IAAIC,YAAY,KACjC,+BACE,4BACE,oCACA,sCACA,wCACA,2CAGJ,+BAAQkB,KA5FZ,EAAK5B,MAAQ,CACX6B,QAAS,GACTQ,OAAO,IALQ,E,gEAkCE,IAAD,OAElB1B,MAAM,yBACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACT,GACL,EAAKY,SAAS,CAAEc,QAAS1B,W,GA1CGa,a,QCAfsB,E,kDACnB,WAAYzC,GAAQ,IAAD,8BACjB,cAAMA,IAcR0C,aAAe,SAACC,GACd,IAAIC,EAASD,EAAEC,OACf,EAAK1B,SAAL,eACG0B,EAAOC,KAAOD,EAAOE,SAlBP,EA2CnBC,OAAS,WACP,IAAIC,EAAU,CACZzB,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,oBAEVwB,KAAMC,KAAKC,UAAU,CACnBlB,WAAY,EAAK9B,MAAM0C,KACvBX,cAAe,EAAK/B,MAAMiD,UAC1BC,OAAQ,EAAKlD,MAAMmD,aACnBC,sBAAuB,EAAKpD,MAAMqD,KAClCC,SAAU,EAAKtD,MAAMuD,YACrBC,UAAW,EAAKxD,MAAMyD,gBAiB1B9C,MAFU,mBAECkC,GACRjC,MAAK,SAACC,GAEL,OADAU,QAAQC,IAAIX,GACLA,EAASC,UAEjBF,MAAK,SAACT,GACDA,EAAKsB,UACP,EAAK5B,MAAMqC,QAAQC,KAAK,YACxBuB,MAAM,oCA9EZ,EAAK1D,MAAQ,CACX0C,KAAM,GACNO,UAAW,GACXE,aAAc,GACdE,KAAM,GACNE,YAAa,GACbE,aAAc,GACdE,OAAQ,GACRC,QAAS,IAXM,E,gEAsBE,IAAD,OAElBjD,MAAM,wBACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAGjBF,MAAK,SAACT,GACL,EAAKY,SAAS,CAAE6C,QAASzD,OAG7BQ,MAAM,wBACHC,MAAK,SAACC,GACL,OAAOA,EAASC,UAGjBF,MAAK,SAACT,GACL,EAAKY,SAAS,CAAE4C,OAAQxD,S,+BAiD5B,OADAoB,QAAQC,IAAIqC,KAAK7D,OAEf,yBAAK8D,GAAG,aAGN,0BAAMC,SAAUF,KAAKjB,QACnB,2BAAOoB,QAAQ,OAAf,UACA,2BACEhC,KAAK,OACLU,KAAK,OACLC,MAAOkB,KAAK7D,MAAM0C,KAClBuB,SAAUJ,KAAKtB,eAGjB,6BAGA,2BAAOyB,QAAQ,UAAf,aACA,2BACEhC,KAAK,OACLU,KAAK,YACLC,MAAOkB,KAAK7D,MAAMiD,UAClBgB,SAAUJ,KAAKtB,eAGjB,6BAEA,2BAAOyB,QAAQ,UAAf,cACA,2BACEhC,KAAK,SACLU,KAAK,eACLwB,IAAI,IACJC,IAAI,KACJxB,MAAOkB,KAAK7D,MAAMkD,OAClBe,SAAUJ,KAAKtB,eAGjB,6BAEA,2BAAOyB,QAAQ,SAAf,sBACA,2BACEhC,KAAK,OACL8B,GAAG,QACHpB,KAAK,OACLC,MAAOkB,KAAK7D,MAAMqD,KAClBY,SAAUJ,KAAKtB,eAGjB,6BAEA,+BACG,IADH,UAGE,4BAAQG,KAAK,cAAcuB,SAAUJ,KAAKtB,cACxC,2CACCsB,KAAK7D,MAAM2D,OAAOzD,KAAI,SAACkE,EAAOhE,GAC7B,OACE,4BAAQC,IAAKD,EAAGuC,MAAOyB,EAAMd,UAC1B,IACAc,EAAMC,gBAOjB,6BAEA,+BACG,IADH,WAGE,4BAAQ3B,KAAK,eAAeuB,SAAUJ,KAAKtB,cACzC,4CACCsB,KAAK7D,MAAM4D,QAAQ1D,KAAI,SAACoE,EAAQlE,GAC/B,OACE,4BAAQC,IAAKD,EAAGuC,MAAO2B,EAAOd,WAC3B,IACAc,EAAOC,iBAOlB,6BAEA,4BAAQvC,KAAK,SAASC,QAAS4B,KAAKjB,QAApC,iB,GA9KyB5B,aC0CpBwD,MA/Bf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KAEE,gCACE,kBAAC,IAAD,CAAMC,GAAG,KACT,+CAKF,6BAASZ,GAAG,OACV,kBAAC,IAAD,CAAMY,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,WAAT,WAKF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5D,IACjC,kBAAC,IAAD,CAAO0D,OAAK,EAACC,KAAK,SAASC,UAAWjF,IACtC,kBAAC,IAAD,CAAO+E,OAAK,EAACC,KAAK,SAASC,UAAWvC,IACtC,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,UAAUC,UAAW3D,QCzB7B4D,QACW,cAA7BpD,OAAOqD,SAASC,UAEe,UAA7BtD,OAAOqD,SAASC,UAEhBtD,OAAOqD,SAASC,SAASC,MACvB,2DCZNC,IAASpF,OACP,kBAAC,IAAMqF,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAMC,c","file":"static/js/main.6514bd26.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Stade extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tournoi: [],\n    };\n  }\n\n  componentDidMount() {\n    let url = \"/routesread/allstadium\";\n\n    fetch(url)\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ tournoi: data });\n      });\n  }\n\n  render = () => {\n    let stade = this.state.tournoi.map((data, i) => {\n      return (\n        <tr key={i}>\n          <td>{data.nom_stade}</td>\n          <td>{data.adresse_stade}</td>\n          <td>{data.cp_stade}</td>\n        </tr>\n      );\n    });\n    return (\n      <table cellSpacing=\"2\" cellPadding=\"5\">\n        <thead>\n          <tr>\n            <th>Nom du Stade</th>\n            <th>Adresse du Stade</th>\n            <th>Code Postal</th>\n          </tr>\n        </thead>\n        <tbody>{stade}</tbody>\n      </table>\n    );\n  };\n}\n","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n    render() {\n        return (\n            <div>\n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class Joueur extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      players: [],\n      joueur:''\n    };\n  }\n\n  deleteJoueur = () => {\n\n    let optionDel = {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    };\n\n\n    fetch(\"/delete/deleteJoueur/\", optionDel)\n      .then((response) => {\n        console.log(response);\n        return response.json();\n      })\n      .then((data) => {\n        if (data.success) {\n          window.confirm(\"Le joueur a bien été supprimer\");\n        }\n      });\n  };\n\n  \n\n  componentDidMount() {\n\n    fetch(\"/routesread/allplayer\")\n      .then((response) => {\n        return response.json();\n      })\n      .then((data) => {\n        this.setState({ players: data });\n      });\n  }\n\n\n  render = () => {\n      \n    let LesJoueurs = this.state.players.map((data, i) => {\n      return (\n        <tr key={i}>\n          <td>{data.nom_joueur}</td>\n          <td>{data.prenom_joueur}</td>\n          <td>\n            {/* ------------- MODIFIER JOUEUR -------------  */}\n            <button\n              type=\"button\"\n              onClick={() =>\n                this.props.history.push(`Joueur/${data.id_joueur}`)\n              }\n            >\n              Modifier\n            </button>\n          </td>\n\n          <td>\n\n            {/* ------------- SUPPRIMER JOUEUR -------------  */}\n\n            <button\n              type=\"button\"\n              onClick={() => this.deleteJoueur(\n                    data.id_joueur,\n                    data.prenom_joueur,\n                    data.nom_joueur\n              )}\n            >\n            \n              Supprimer\n            </button>\n          </td>\n        </tr>\n      );\n    });\n\n    return (\n      <table cellSpacing=\"2\" cellPadding=\"5\">\n        <thead>\n          <tr>\n            <th>Nom </th>\n            <th>Prenom</th>\n            <th>Modifier</th>\n            <th>Supprimer</th>\n          </tr>\n        </thead>\n        <tbody>{LesJoueurs}</tbody>\n      </table>\n    );\n  };\n}\n","import React, { Component } from \"react\";\n\nexport default class Ajout extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n      firstname: '',\n      numeroJoueur: '',\n      date: '',\n      posteJoueur: '',\n      equipeJoueur: '',\n      postes: [],\n      equipes: [],\n    };\n  }\n\n  handleChange = (e) => {\n    let target = e.target;\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  componentDidMount() {\n    //AFFICHE EQUIPE\n    fetch(\"/routesread/allteams\")\n      .then((response) => {\n        return response.json();\n      })\n\n      .then((data) => {\n        this.setState({ equipes: data });\n      });\n    // AFFICHE POSTE\n    fetch(\"/routesread/allposte\")\n      .then((response) => {\n        return response.json();\n      })\n\n      .then((data) => {\n        this.setState({ postes: data });\n      });\n  }\n\n  submit = () => {\n    let options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n      body: JSON.stringify({\n        nom_joueur: this.state.name,\n        prenom_joueur: this.state.firstname,\n        numero: this.state.numeroJoueur,\n        date_naissance_joueur: this.state.date,\n        id_poste: this.state.posteJoueur,\n        id_equipe: this.state.equipeJoueur,\n      }),\n    };\n\n    // ------------- TEST -------------\n\n    // console.log(this.state.name);\n    // console.log(this.state.firstname);\n    // console.log(this.state.numeroJoueur);\n    // console.log(this.state.date);\n    // console.log(this.state.posteJoueur);\n    // console.log(this.state.equipeJoueur);\n\n    // ------------- FIN TEST -------------\n\n    let url = \"/create/newusers\";\n\n    fetch(url, options)\n      .then((response) => {\n        console.log(response);\n        return response.json();\n      })\n      .then((data) => {\n        if (data.success) {\n          this.props.history.push(\"/joueurs\");\n          alert(\"Le Joueur a été creer\");\n        }\n      });\n  };\n\n  render() {\n    console.log(this.state)\n    return (\n      <div id=\"conteneur\">\n\n        {/* ------------- NOM -------------  */}\n        <form onSubmit={this.submit}>\n          <label htmlFor=\"Nom\">Nom : </label>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n\n          <br></br>\n        {/* ------------- PRENOM -------------  */}\n\n          <label htmlFor=\"Prenom\">Prenom : </label>\n          <input\n            type=\"text\"\n            name=\"firstname\"\n            value={this.state.firstname}\n            onChange={this.handleChange}\n          />\n\n          <br></br>\n        {/* ------------- NUMERO -------------  */}\n          <label htmlFor=\"Numero\"> Numero : </label>\n          <input\n            type=\"number\"\n            name=\"numeroJoueur\"\n            min=\"1\"\n            max=\"99\"\n            value={this.state.numero}\n            onChange={this.handleChange}\n          />\n\n          <br></br>\n        {/* ------------- DATE DE NAISSANCE -------------  */}\n          <label htmlFor=\"start\">Date de naissance:</label>\n          <input\n            type=\"date\"\n            id=\"start\"\n            name=\"date\"\n            value={this.state.date}\n            onChange={this.handleChange}\n          />\n\n          <br></br>\n        {/* ------------- POSTE JOUEUR -------------  */}\n          <label>\n            {\" \"}\n            POSTE :\n            <select name=\"posteJoueur\" onChange={this.handleChange}>\n              <option> POSTE </option>\n              {this.state.postes.map((poste, i) => {\n                return (\n                  <option key={i} value={poste.id_poste}>\n                    {\" \"}\n                    {poste.nom_poste}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n\n          <br></br>\n        {/* ------------- EQUIPE JOUEUR -------------  */}\n          <label>\n            {\" \"}\n            Equipe :\n            <select name=\"equipeJoueur\" onChange={this.handleChange}>\n              <option> EQUIPE </option>\n              {this.state.equipes.map((equipe, i) => {\n                return (\n                  <option key={i} value={equipe.id_equipe}>\n                    {\" \"}\n                    {equipe.nom_equipe}\n                  </option>\n                );\n              })}\n            </select>\n          </label>\n\n          <br></br>\n          \n          <button type=\"button\" onClick={this.submit}>\n            Ajouter\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\n\n// TODO IMPORTE Router\nimport { BrowserRouter as Router, Route, Switch, Link } from \"react-router-dom\";\n\n// TODO IMPORT COMPONENTS\nimport Stade from \"./Components/Stade\";\nimport Home from \"./Components/Home\";\nimport Joueur from \"./Components/Joueur\";\nimport Ajout from \"./Components/Ajout\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* HEADER */}\n        <header>\n          <Link to=\"/\">\n          <h1>Tournois Foot</h1>\n          </Link>\n        </header>\n\n        {/* NAVBARE */}\n        <section id=\"nav\">\n          <Link to=\"/Stade\">Stade</Link>\n          <Link to=\"/Ajout\">Ajout</Link>\n          <Link to=\"/Joueur\">Joueur</Link>\n\n        </section>\n\n        {/* SWITCH ROUTE */}\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/Stade\" component={Stade} />\n          <Route exact path=\"/Ajout\" component={Ajout} />\n          <Route exact path=\"/Joueur\" component={Joueur} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}